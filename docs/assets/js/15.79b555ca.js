(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{221:function(t,e,r){"use strict";r.r(e);var a=r(0),s=Object(a.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),r("br"),t._v(" "),r("img",{attrs:{src:"https://raw.githubusercontent.com/quickhack/translations/master/git-workflows-and-tutorials/images/git-workflows-gitflow.png",alt:"Git Workflows: Gitflow Cycle"}}),t._v(" "),r("p",[t._v("Gitflow工作流定义了一个围绕项目发布的严格分支模型。虽然比功能分支工作流复杂几分，但提供了用于一个健壮的用于管理大型项目的框架。\nGitflow工作流没有用超出功能分支工作流的概念和命令，而是为不同的分支分配一个很明确的角色，并定义分支之间如何和什么时候进行交互。除了使用功能分支，在做准备、维护和记录发布也使用各自的分支。当然你可以用上功能分支工作流所有的好处：Pull Requests、隔离实验性开发和更高效的协作。")]),t._v(" "),t._m(2),t._v(" "),r("p",[t._v("Gitflow工作流仍然用中央仓库作为所有开发者的交互中心。和其它的工作流一样，开发者在本地工作并push分支到要中央仓库中。")]),t._v(" "),t._m(3),t._v(" "),r("p",[t._v("相对使用仅有的一个master分支，Gitflow工作流使用2个分支来记录项目的历史。master分支存储了正式发布的历史，而develop分支作为功能的集成分支。这样也方便master分支上的所有提交分配一个版本号")]),t._v(" "),r("img",{attrs:{src:"https://raw.githubusercontent.com/quickhack/translations/master/git-workflows-and-tutorials/images/git-workflow-release-cycle-1historical.png",alt:""}}),t._v(" "),r("p",[t._v("剩下要说明的问题围绕着这2个分支的区别展开。")]),t._v(" "),t._m(4),t._v(" "),r("p",[t._v("每个新功能位于一个自己的分支，这样可以push到中央仓库以备份和协作。但功能分支不是从master分支上拉出新分支，而是使用develop分支作为父分支。当新功能完成时，合并回develop分支。新功能提交应该从不直接与master分支交互。")]),t._v(" "),r("img",{attrs:{src:"https://raw.githubusercontent.com/quickhack/translations/master/git-workflows-and-tutorials/images/git-workflow-release-cycle-2feature.png",alt:""}}),t._v(" "),r("p",[t._v("注意，从各种含义和目的上来看，功能分支加上develop分支就是功能分支工作流的用法。但Gitflow工作流没有在这里止步。")]),t._v(" "),t._m(5),t._v(" "),r("img",{attrs:{src:"https://raw.githubusercontent.com/quickhack/translations/master/git-workflows-and-tutorials/images/git-workflow-release-cycle-3release.png",alt:""}}),t._v(" "),r("p",[t._v("一旦develop分支上有了做一次发布（或者说快到了既定的发布日）的足够功能，就从develop分支上fork一个发布分支。新建的分支用于开始发布循环，所以从这个时间点开始之后新的功能不能再加到这个分支上 —— 这个分支只应该做Bug修复、文档生成和其它面向发布任务。一旦对外发布的工作都完成了，发布分支合并到master分支并分配一个版本号打好Tag。另外，这些从新建发布分支以来的做的修改要合并回develop分支。")]),t._v(" "),r("p",[t._v("使用一个用于发布准备的专门分支，使得一个团队可以在完善当前的发布版本的同时，另一个团队可以继续开发下个版本的功能。\n这也打造定义良好的开发阶段（比如，可以很轻松地说，『这周我们要做准备发布版本4.0』，并且在仓库的目录结构中可以实际看到）。")]),t._v(" "),r("p",[t._v("常用的分支约定：")]),t._v(" "),r("p",[t._v("用于新建发布分支的分支: develop\n用于合并的分支: master\n分支命名: release-* 或 release/*")]),t._v(" "),t._m(6),t._v(" "),r("img",{attrs:{src:"https://raw.githubusercontent.com/quickhack/translations/master/git-workflows-and-tutorials/images/git-workflow-release-cycle-4maintenance.png",alt:""}}),t._v(" "),r("p",[t._v("维护分支或说是热修复（hotfix）分支用于生成快速给产品发布版本（production releases）打补丁，这是唯一可以直接从master分支fork出来的分支。修复完成，修改应该马上合并回master分支和develop分支（当前的发布分支），master分支应该用新的版本号打好Tag。")]),t._v(" "),r("p",[t._v("为Bug修复使用专门分支，让团队可以处理掉问题而不用打断其它工作或是等待下一个发布循环。你可以把维护分支想成是一个直接在master分支上处理的临时发布。")]),t._v(" "),t._m(7),t._v(" "),r("p",[t._v("完美解决这一复杂流程")]),t._v(" "),r("img",{attrs:{src:t.$withBase("/img/SourceTree-git.jpg")}})])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"git-flow-git工作流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-flow-git工作流","aria-hidden":"true"}},[this._v("#")]),this._v(" Git flow (Git工作流)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定义","aria-hidden":"true"}},[this._v("#")]),this._v(" 定义")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"工作方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工作方式","aria-hidden":"true"}},[this._v("#")]),this._v(" 工作方式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"历史分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#历史分支","aria-hidden":"true"}},[this._v("#")]),this._v(" 历史分支")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"功能分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#功能分支","aria-hidden":"true"}},[this._v("#")]),this._v(" 功能分支")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"发布分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#发布分支","aria-hidden":"true"}},[this._v("#")]),this._v(" 发布分支")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"维护分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#维护分支","aria-hidden":"true"}},[this._v("#")]),this._v(" 维护分支")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"sourcetree-个人推荐"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sourcetree-个人推荐","aria-hidden":"true"}},[this._v("#")]),this._v(" SourceTree(个人推荐)")])}],!1,null,null,null);e.default=s.exports}}]);