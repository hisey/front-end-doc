(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{277:function(a,t,s){"use strict";s.r(t);var e=s(28),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"vue-代码规范推荐"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-代码规范推荐"}},[a._v("#")]),a._v(" vue 代码规范推荐")]),a._v(" "),s("h2",{attrs:{id:"必要的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#必要的"}},[a._v("#")]),a._v(" 必要的")]),a._v(" "),s("h3",{attrs:{id:"为组件样式设置作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为组件样式设置作用域"}},[a._v("#")]),a._v(" 为组件样式设置作用域")]),a._v(" "),s("p",[a._v("对于应用来说，顶级 App 组件和布局组件中的样式可以是全局的，但是其它所有组件都应该是有作用域的。\n这条规则只和单文件组件有关。你不一定要使用 scoped 特性。设置作用域也可以通过 CSS Modules，那是一个基于 class 的类似 BEM 的策略，当然你也可以使用其它的库或约定。\n不管怎样，对于组件库，我们应该更倾向于选用基于 class 的策略而不是 scoped 特性。\n这让覆写内部样式更容易：使用了常人可理解的 class 名称且没有太高的选择器优先级，而且不太会导致冲突。\n了解更多"),s("a",{attrs:{href:"https://github.com/css-modules/css-modules",target:"_blank",rel:"noopener noreferrer"}},[a._v("CSS Modules"),s("OutboundLink")],1)]),a._v(" "),s("h4",{attrs:{id:"例子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[a._v("#")]),a._v(" 例子")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("template"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("button "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"[$style.button, $style.buttonClose]"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("X")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("button"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("template"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v(" 使用 "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("CSS")]),a._v(" Modules "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("style module"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("button "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  border"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" none"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  border"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("radius"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("px"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("buttonClose "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  background"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("color"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" red"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("style"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),s("h2",{attrs:{id:"强烈推荐"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强烈推荐"}},[a._v("#")]),a._v(" 强烈推荐")]),a._v(" "),s("h3",{attrs:{id:"单文件组件文件的大小写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单文件组件文件的大小写"}},[a._v("#")]),a._v(" 单文件组件文件的大小写")]),a._v(" "),s("p",[a._v("单文件组件的文件名应该要么始终是单词大写开头 (PascalCase)，要么始终是横线连接 (kebab-case)。\n单词大写开头对于代码编辑器的自动补全最为友好，因为这使得我们在 JS(X) 和模板中引用组件的方式尽可能的一致。然而，混用文件命名方式有的时候会导致大小写不敏感的文件系统的问题，这也是横线连接命名同样完全可取的原因。")]),a._v(" "),s("h4",{attrs:{id:"例子-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#例子-2"}},[a._v("#")]),a._v(" 例子")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("components/\n|- MyComponent.vue\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("components/\n|- my-component.vue\n")])])]),s("h3",{attrs:{id:"基础组件名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础组件名"}},[a._v("#")]),a._v(" 基础组件名")]),a._v(" "),s("p",[a._v("应用特定样式和约定的基础组件 (也就是展示类的、无逻辑的或无状态的组件) 应该全部以一个特定的前缀开头，比如 Base、App 或 V。")]),a._v(" "),s("h4",{attrs:{id:"例子-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#例子-3"}},[a._v("#")]),a._v(" 例子")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("components/\n|- BaseButton.vue\n|- BaseTable.vue\n|- BaseIcon.vue\ncomponents/\n|- AppButton.vue\n|- AppTable.vue\n|- AppIcon.vue\ncomponents/\n|- VButton.vue\n|- VTable.vue\n|- VIcon.vue\n")])])]),s("h3",{attrs:{id:"单例组件名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单例组件名"}},[a._v("#")]),a._v(" 单例组件名")]),a._v(" "),s("p",[a._v("只应该拥有单个活跃实例的组件应该以 The 前缀命名，以示其唯一性。")]),a._v(" "),s("p",[a._v("这不意味着组件只可用于一个单页面，而是每个页面只使用一次。这些组件永远不接受任何 prop，因为它们是为你的应用定制的，而不是它们在你的应用中的上下文。如果你发现有必要添加 prop，那就表明这实际上是一个可复用的组件，只是目前在每个页面里只使用一次。")]),a._v(" "),s("h4",{attrs:{id:"例子-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#例子-4"}},[a._v("#")]),a._v(" 例子")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("components/\n|- TheHeading.vue\n|- TheSidebar.vue\n")])])]),s("h3",{attrs:{id:"紧密耦合的组件名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#紧密耦合的组件名"}},[a._v("#")]),a._v(" 紧密耦合的组件名")]),a._v(" "),s("p",[a._v("和父组件紧密耦合的子组件应该以父组件名作为前缀命名。")]),a._v(" "),s("p",[a._v("如果一个组件只在某个父组件的场景下有意义，这层关系应该体现在其名字上。因为编辑器通常会按字母顺序组织文件，所以这样做可以把相关联的文件排在一起。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("components/\n|- TodoList.vue\n|- TodoListItem.vue\n|- TodoListItemButton.vue\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("components/\n|- SearchSidebar.vue\n|- SearchSidebarNavigation.vue\n")])])]),s("h3",{attrs:{id:"组件名中的单词顺序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件名中的单词顺序"}},[a._v("#")]),a._v(" 组件名中的单词顺序")]),a._v(" "),s("p",[a._v("组件名应该以高级别的 (通常是一般化描述的) 单词开头，以描述性的修饰词结尾")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("components/\n|- SearchButtonClear.vue\n|- SearchButtonRun.vue\n|- SearchInputQuery.vue\n|- SearchInputExcludeGlob.vue\n|- SettingsCheckboxTerms.vue\n|- SettingsCheckboxLaunchOnStartup.vue\n")])])]),s("h3",{attrs:{id:"完整单词的组件名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#完整单词的组件名"}},[a._v("#")]),a._v(" 完整单词的组件名")]),a._v(" "),s("h4",{attrs:{id:"组件名应该倾向于完整单词而不是缩写。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件名应该倾向于完整单词而不是缩写。"}},[a._v("#")]),a._v(" 组件名应该倾向于完整单词而不是缩写。")]),a._v(" "),s("p",[a._v("编辑器中的自动补全已经让书写长命名的代价非常之低了，而其带来的明确性却是非常宝贵的。不常用的缩写尤其应该避免。")]),a._v(" "),s("h4",{attrs:{id:"反例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反例"}},[a._v("#")]),a._v(" 反例")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("components/\n|- SdSettings.vue\n|- UProfOpts.vue\n")])])]),s("h4",{attrs:{id:"好例子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#好例子"}},[a._v("#")]),a._v(" 好例子")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("components/\n|- StudentDashboardSettings.vue\n|- UserProfileOptions.vue\n")])])]),s("h3",{attrs:{id:"prop-名大小写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#prop-名大小写"}},[a._v("#")]),a._v(" Prop 名大小写")]),a._v(" "),s("h4",{attrs:{id:"在声明-prop-的时候，其命名应该始终使用-camelcase，而在模板和-jsx-中应该始终使用-kebab-case。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在声明-prop-的时候，其命名应该始终使用-camelcase，而在模板和-jsx-中应该始终使用-kebab-case。"}},[a._v("#")]),a._v(" 在声明 prop 的时候，其命名应该始终使用 camelCase，而在模板和 JSX 中应该始终使用 kebab-case。")]),a._v(" "),s("p",[a._v("我们单纯的遵循每个语言的约定。在 JavaScript 中更自然的是 camelCase。而在 HTML 中则是 kebab-case。")]),a._v(" "),s("h4",{attrs:{id:"反例-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反例-2"}},[a._v("#")]),a._v(" 反例")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("props: {\n  'greeting-text': String\n}\n<WelcomeMessage greetingText=\"hi\"/>\n")])])]),s("h4",{attrs:{id:"好例子-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#好例子-2"}},[a._v("#")]),a._v(" 好例子")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('props: {\n  greetingText: String\n}\n<WelcomeMessage greeting-text="hi"/>\n')])])])])}),[],!1,null,null,null);t.default=r.exports}}]);